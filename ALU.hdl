// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a=x, b[0..15]=false, sel=zx, out=o1x);   // (zx==1) set x = 0 
        Not16(in=o1x, out=noto1x);  // compute ~x
        Mux16(a=o1x, b=noto1x, sel=nx, out=o2x);    // if (nx==1) set x = ~x

        Mux16(a=y, b[0..15]=false, sel=zy, out=o1y);    // (zy==1) set y = 0 
        Not16(in=o1y, out=noto1y);  // compute ~y
        Mux16(a=o1y, b=noto1y, sel=ny, out=o2y);    // if (ny==1) set y = ~y

        Add16(a=o2x, b=o2y, out=add);   // compute x + y
        And16(a=o2x, b=o2y, out=and);   // compute x & y
        Mux16(a=and, b=add, sel=f, out=out1);    // if (f==1)  set out = x + y else out = x & y

        // ng = 1 if (out==0), ng = 0 otherwise
        // if (no = 1) out = ~out else out = out
        Not16(in=out1, out=notOut1);
        Mux16(a=out1, b=notOut1, sel=no, out[0..7]=orA, out[8..15]=orB, out[15]=ng, out=out);
        
        // sets zr to 1 if (out==0), 0 otherwise
        Or8Way(in=orA, out=orOut1);
        Or8Way(in=orB, in[7]=false, out=orOut2);
        Or(a=orOut1, b=orOut2, out=notZr);
        Not(in=notZr, out=zr);
}